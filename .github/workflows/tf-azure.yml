name: "Azure Infra"

on:
  workflow_dispatch: 



jobs:
  provision-ec2:
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash
          working-directory: ./project/terraform/azure

    steps:
      # Checkout repo
      - uses: actions/checkout@v3

      # Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: 'eu-west-1'

      - name: Debug GitHub Secrets
        run: |
          echo "AZURE_SUBSCRIPTION_ID length: ${#AZURE_SUBSCRIPTION_ID}"
          echo "AZURE_CLIENT_ID length: ${#AZURE_CLIENT_ID}"
          echo "AZURE_TENANT_ID length: ${#AZURE_TENANT_ID}"
          echo "AZURE_CLIENT_SECRET length: ${#AZURE_CLIENT_SECRET}"
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Set up Terraform environment variables
        run: |
          echo "TF_VAR_AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo $GITHUB_ENV

      - name: "Set up providers.tf"
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/
          export AWS_REGION=us-east-1  # Change this to your desired region
          aws ssm get-parameter --name "provider_azure" --query "Parameter.Value" --output text --region $AWS_REGION >> ./providers.tf
          cat aws.pem


      # - name: Authenticate with Azure
      #   run: |
      #     echo "Logging into Azure..."
      #     az login --service-principal \
      #       -u $AZURE_CLIENT_ID \
      #       -p $AZURE_CLIENT_SECRET \
      #       --tenant $AZURE_TENANT_ID
          
      #     az account set --subscription $AZURE_SUBSCRIPTION_ID
      #   env:
      #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      #     AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}



      #  Add SSH Key from GitHub Secrets
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" >> ~/.ssh/authorized_keys
          # echo "${{ secrets.AZURE_SSH_PRIVATE_KEY }}" >> ./azure.pem
          chmod 600 ./azure.pem
          # echo "${{ secrets.AZURE_SSH_PUBLIC_KEY }}" >> ./azure.pem.pub
          ls -la

      # Terraform Setup
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_azure_client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}


      # Save instance IPs and create inventory file for Ansible
      - name: Save instance IPs and create inventory
        run: |
          INSTANCE_IPS=$(terraform output -json k3s_vm_public_ip)

          # Check if it's a JSON array or a string
          if echo "$INSTANCE_IPS" | jq -e 'if type == "string" then empty else . end' >/dev/null; then
            IP_LIST=$(echo "$INSTANCE_IPS" | jq -r '.[]')
          else
            IP_LIST=$(echo "$INSTANCE_IPS" | jq -r '.')
          fi

          # Create inventory.ini
          echo "[servers]" > inventory.ini
          echo "$IP_LIST ansible_user=azureuser ansible_ssh_private_key_file=./azure.pem" >> inventory.ini


      # Wait for SSH to be available
      - name: Wait for SSH to be available
        run: |
          for ip in $(cat instance-ips.txt); do
            echo "⏳ Waiting for SSH on $ip..."
            SECONDS=0
            while ! nc -z $ip 22; do
              sleep 10
              if [ $SECONDS -gt 300 ]; then
                echo "❌ Timeout: SSH is not available on $ip after 5 minutes."
                exit 1
              fi
            done
            echo "✅ SSH is available on $ip!"
          done



      # Test SSH connection
      - name: Check SSH Key
        run: |
          if [ ! -f ./azure.pem ]; then
            echo "ERROR: SSH key not found!"
            exit 1
          fi
          ls -l ./azure.pem

      - name: Set correct permissions for SSH key
        run: chmod 600 ./azure.pem

      - name: Check SSH Key Format
        run: |
          sudo apt-get install libssl-dev
          cat ./azure.pem
          ssh-keygen -l -f ./azure.pem || echo "Invalid SSH key!"

      - name: Convert SSH key to RSA format
        run: ssh-keygen -p -m PEM -f ./azure.pem -o -P "" -N ""

      - name: Test SSH connection
        run: |
          INSTANCE_IP=$(terraform output -json k3s_vm_public_ip | jq -r 'if type == "string" then . else .[0] end')

          echo "Trying to SSH into $INSTANCE_IP"
          ssh -vvv -o StrictHostKeyChecking=no -i ./azure.pem azureuser@$INSTANCE_IP


      # Install Ansiblegit 
      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      # Run Ansible Playbook
      - name: Run Ansible Playbook
        run: |
          cat -A inventory.ini
          ansible-playbook -i inventory.ini install_k3s.yml -vvv



